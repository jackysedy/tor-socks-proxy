
node {
    stage("Git"){
        git credentialsId: 'cced35f3-1bac-42ef-81d3-960072464a3b', url: 'https://github.com/jackysedy/tor-socks-proxy'
    }
    stage('chooseDockerTags') {
        if ( currentBuild.rawBuild.getCauses()[0].toString().contains('UserIdCause') ){
            def image = "IMAGE"
            def url = "https://registry.hub.docker.com/v1/repositories/jackysedi/tor-socks-proxy/tags" 
            def list = getDockerImageTags(url)
            list = sortReverse(list)
            def versions = list.join("\n")
            def userInput = input(
             id: 'userInput', message: 'Promote:', parameters: [
                    [$class: 'ChoiceParameterDefinition', choices: versions, description: 'Versions', name: 'version']
             ]
            )   
            println "Pulling Tag: $userInput"
            sh """
                sed -i 's/tor-socks-proxy:latest/tor-socks-proxy:${userInput}/g' docker-compose.yml
            """    
            def values = userInput.split('_')
            Port = values[1]
            sh"""
                sed -i 's/XXXX/${Port}/g' docker-compose.yml
            """
        }
        else{
            println "Pulling Tag: $Tag"
            sh """
                sed -i 's/tor-socks-proxy:latest/tor-socks-proxy:${Tag}_${Port}/g' docker-compose.yml
                sed -i 's/XXXX/$Port/g' docker-compose.yml
                
            """
        }
        sh """
            cd test
            docker build --no-cache -t test .
            cd ..
        """
        docker.withRegistry('https://registry.hub.docker.com/v1/repositories/jackysedi/tor-socks-proxy') {
            sh """
                docker-compose up --abort-on-container-exit 
            """
        }
    }
}

@NonCPS
def sortReverse(list) {
    list.reverse()
}

def getDockerImageTags(url) {
    def myjson = getUrl(url)
    def json = jsonParse(myjson);
    def tags = json.name
    tags
}

def jsonParse(json) {
    new groovy.json.JsonSlurper().parseText(json)
}

def getUrl(url) {
    sh(returnStdout: true, script: "curl -s ${url} 2>&1 | tee result.json")
    def data = readFile('result.json').trim()
    data
}
